import type {
  CreateDatabaseParameters
} from "@notionhq/client/build/src/api-endpoints";
import {
  titleProperty,
  relationProperty,
  richTextProperty,
  selectProperty,
  numberProperty,
  dateProperty,
  checkboxProperty,
  emailProperty,
  phoneProperty,
  urlProperty,
  createAddressFields,
  createMetadataFields,
  statusOptions,
  collectionMethodOptions,
  taxExemptOptions
} from "./utils";

export const getInvoiceSchema = (
  customerDatabaseId: string,
  chargeDatabaseId: string,
  paymentIntentDatabaseId: string
): CreateDatabaseParameters["properties"] => {
  const properties: CreateDatabaseParameters["properties"] = {
  "Invoice ID": titleProperty(),
  "Customer": relationProperty(customerDatabaseId),
  "Invoice Number": richTextProperty(),
  "Status": selectProperty(statusOptions.invoice),
  "Collection Method": selectProperty(collectionMethodOptions),
  "Currency": richTextProperty(),
  "Total": numberProperty(),
  "Subtotal": numberProperty(),
  "Amount Due": numberProperty(),
  "Amount Paid": numberProperty(),
  "Amount Remaining": numberProperty(),
  "Amount Overpaid": numberProperty(),
  "Amount Shipping": numberProperty(),
  "Starting Balance": numberProperty(),
  "Ending Balance": numberProperty(),
  "Created Date": dateProperty(),
  "Due Date": dateProperty(),
  "Period Start": dateProperty(),
  "Period End": dateProperty(),
  "Finalized At": dateProperty(),
  "Paid At": dateProperty(),
  "Voided At": dateProperty(),
  "Next Payment Attempt": dateProperty(),
  "Billing Reason": selectProperty([
    {name: "manual", color: "gray" as const},
    {name: "subscription", color: "blue" as const},
    {name: "subscription_create", color: "blue" as const},
    {name: "subscription_cycle", color: "blue" as const},
    {name: "subscription_threshold", color: "orange" as const},
    {name: "subscription_update", color: "purple" as const},
    {name: "upcoming", color: "yellow" as const}
  ]),
  "Attempted": checkboxProperty(),
  "Attempt Count": numberProperty(),
  "Auto Advance": checkboxProperty(),
  "Live Mode": checkboxProperty(),
  "Customer Name": richTextProperty(),
  "Customer Email": emailProperty(),
  "Customer Phone": phoneProperty(),
  "Customer Tax Exempt": selectProperty(taxExemptOptions),
  ...createAddressFields("Customer"),
  "Customer Shipping Name": richTextProperty(),
  "Customer Shipping Phone": phoneProperty(),
  ...createAddressFields("Customer Shipping"),
  "Automatic Tax Enabled": checkboxProperty(),
  "Automatic Tax Status": selectProperty([
    {name: "complete", color: "green" as const},
    {name: "failed", color: "red" as const},
    {name: "requires_location_inputs", color: "yellow" as const}
  ]),
  "Description": richTextProperty(),
  "Footer": richTextProperty(),
  "Statement Descriptor": richTextProperty(),
  "Default Payment Method": richTextProperty(),
  "Default Source": richTextProperty(),
  "Hosted Invoice URL": urlProperty(),
  "Invoice PDF URL": urlProperty(),
  "Receipt Number": richTextProperty(),
  "Account Country": richTextProperty(),
  "Account Name": richTextProperty(),
  "Application": richTextProperty(),
  "On Behalf Of": richTextProperty(),
  "Subscription": richTextProperty(),
  "Quote": richTextProperty(),
  "Latest Revision": richTextProperty(),
  "From Invoice": richTextProperty(),
  "Line Items Count": numberProperty(),
  "Payments Count": numberProperty(),
  "Webhooks Delivered At": dateProperty(),
  "Test Clock": richTextProperty(),
  "Tax Rate Percentage": numberProperty("percent"),
  "Primary Charge": relationProperty(chargeDatabaseId),
  "Primary Payment Intent": relationProperty(paymentIntentDatabaseId),
  ...createMetadataFields()
  };

  return properties;
}